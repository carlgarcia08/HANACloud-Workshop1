"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCloudMtaNotInstalledError = exports.ensureCloudMtaInstalledInPath = exports.ensureCloudMtaInstalled = exports.createCloudMtaNotInstalledError = exports.CloudMtaVersionMismatchError = exports.CloudMtaNotInstalledError = exports.setMtaCommandParamsForTests = exports.MIN_CLOUD_MTA_VERSION = void 0;
const process_utils_1 = require("./process-utils");
let MTA_COMMAND_FLAGS = ["-v"];
// This version number should be synchronized with the version in the README.md and package.json
const MIN_MTA_VERSION = {
    major: 0,
    minor: 1,
    patch: 10,
};
let minMtaVersion = MIN_MTA_VERSION;
exports.MIN_CLOUD_MTA_VERSION = `${MIN_MTA_VERSION.major}.${MIN_MTA_VERSION.minor}.${MIN_MTA_VERSION.patch}`;
function setMtaCommandParamsForTests(testParams) {
    var _a, _b;
    // These values should be synchronized with those above
    MTA_COMMAND_FLAGS = (_a = testParams.flags) !== null && _a !== void 0 ? _a : ["-v"];
    minMtaVersion = (_b = testParams.minVersion) !== null && _b !== void 0 ? _b : MIN_MTA_VERSION;
}
exports.setMtaCommandParamsForTests = setMtaCommandParamsForTests;
const messages = {
    CLOUD_MTA_NOT_INSTALLED: "Cloud MTA is not installed in your environment. Go to https://github.com/SAP/cloud-mta to install the tool and try again.",
    CLOUD_MTA_UNKNOWN_VERSION: "Could not determine which Cloud MTA version is installed in your system. Go to https://github.com/SAP/cloud-mta to install the tool and try again.",
    CLOUD_MTA_VERSION_MISMATCH: `The Cloud MTA version is lower than the minimal supported version (${exports.MIN_CLOUD_MTA_VERSION}). Go to https://github.com/SAP/cloud-mta to install the tool and try again.`,
};
class CloudMtaNotInstalledError extends Error {
}
exports.CloudMtaNotInstalledError = CloudMtaNotInstalledError;
class CloudMtaVersionMismatchError extends Error {
}
exports.CloudMtaVersionMismatchError = CloudMtaVersionMismatchError;
function createCloudMtaNotInstalledError() {
    return new CloudMtaNotInstalledError(messages.CLOUD_MTA_NOT_INSTALLED);
}
exports.createCloudMtaNotInstalledError = createCloudMtaNotInstalledError;
async function ensureCloudMtaInstalled() {
    return ensureCloudMtaInstalledInPath(await process_utils_1.getMtaCommand());
}
exports.ensureCloudMtaInstalled = ensureCloudMtaInstalled;
async function ensureCloudMtaInstalledInPath(mtaPath) {
    let output;
    try {
        output = await process_utils_1.runProcess(mtaPath, MTA_COMMAND_FLAGS);
    }
    catch (e) {
        if (e.code === "ENOENT") {
            throw createCloudMtaNotInstalledError();
        }
        throw new CloudMtaVersionMismatchError(messages.CLOUD_MTA_UNKNOWN_VERSION);
    }
    const versionMatch = /(\d+)\.(\d+)\.(\d+)/.exec(output);
    if (versionMatch === null) {
        throw new CloudMtaVersionMismatchError(messages.CLOUD_MTA_UNKNOWN_VERSION);
    }
    else {
        const version = {
            major: Number(versionMatch[1]),
            minor: Number(versionMatch[2]),
            patch: Number(versionMatch[3]),
        };
        if (isVersionLower(version, minMtaVersion)) {
            throw new CloudMtaVersionMismatchError(messages.CLOUD_MTA_VERSION_MISMATCH);
        }
    }
}
exports.ensureCloudMtaInstalledInPath = ensureCloudMtaInstalledInPath;
function isCloudMtaNotInstalledError(err) {
    return err instanceof CloudMtaNotInstalledError;
}
exports.isCloudMtaNotInstalledError = isCloudMtaNotInstalledError;
function isVersionLower(first, second) {
    return (first.major < second.major ||
        (first.major === second.major && first.minor < second.minor) ||
        (first.major === second.major &&
            first.minor === second.minor &&
            first.patch < second.patch));
}
//# sourceMappingURL=execution.js.map