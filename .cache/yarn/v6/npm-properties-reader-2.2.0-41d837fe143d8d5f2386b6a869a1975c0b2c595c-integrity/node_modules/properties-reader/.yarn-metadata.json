{
  "manifest": {
    "name": "properties-reader",
    "description": "Properties file reader for Node.js",
    "version": "2.2.0",
    "author": {
      "name": "Steve King",
      "email": "steve@mydev.co"
    },
    "contributors": [
      {
        "name": "Steve King",
        "email": "steve@mydev.co"
      },
      {
        "name": "Aureliano Bergese",
        "email": "onailerua@hotmail.coom"
      }
    ],
    "dependencies": {
      "mkdirp": "^1.0.4"
    },
    "devDependencies": {
      "jest": "^26.6.3"
    },
    "keywords": [
      "properties",
      "ini",
      "parser"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/steveukx/properties"
    },
    "main": "src/properties-reader-factory",
    "files": [
      "src/**/*.js"
    ],
    "scripts": {
      "preversion": "npm test",
      "postversion": "npm publish && git push && git push --tags",
      "test": "jest --coverage"
    },
    "engines": {
      "node": ">=10"
    },
    "license": "MIT",
    "jest": {
      "roots": [
        "<rootDir>/src/",
        "<rootDir>/test/"
      ],
      "coverageThreshold": {
        "global": {
          "branches": 80,
          "functions": 80,
          "lines": 80,
          "statements": 80
        }
      },
      "coveragePathIgnorePatterns": [
        "<rootDir>/test/"
      ],
      "coverageReporters": [
        "json",
        "lcov",
        "text",
        "clover"
      ],
      "testMatch": [
        "**/test/**/*.spec.*"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-properties-reader-2.2.0-41d837fe143d8d5f2386b6a869a1975c0b2c595c-integrity/node_modules/properties-reader/package.json",
    "readmeFilename": "README.md",
    "readme": "Properties-Reader\n=================\n\nAn ini file compatible properties reader for [Node.JS](http://nodejs.org)\n\nInstallation\n============\n\nThe easiest installation is through [NPM](http://npmjs.org):\n\n    npm install properties-reader\n\nAPI\n===\n\nRead properties from a file:\n\n    var propertiesReader = require('properties-reader');\n    var properties = propertiesReader('/path/to/properties.file');\n\nThe properties are then accessible either by fully qualified name, or if the property names are in dot-delimited\nnotation, they can be access as an object:\n\n    // fully qualified name\n    var property = properties.get('some.property.name');\n\n    // by object path\n    var property = properties.path().some.property.name;\n\nTo read more than one file, chain calls to the `.append()` method:\n\n    properties.append('/another.file').append('/yet/another.file');\n\nTo read properties from a string, use the `.read()` method:\n\n    properties.read('some.property = Value \\n another.property = Another Value');\n\nTo set a single property into the properties object, use `.set()`:\n\n    properties.set('property.name', 'Property Value');\n\nWhen reading a `.ini` file, sections are created by having a line that contains just a section name in square\nbrackets. The section name is then prefixed to all property names that follow it until another section name is found\nto replace the current section.\n\n    # contents of properties file\n    [main]\n    some.thing = foo\n\n    [blah]\n    some.thing = bar\n\n    // reading these back from the properties reader\n    properties.get('main.some.thing') == 'foo';\n    properties.get('blah.some.thing') == 'bar';\n    \n    // looping through the properties reader\n    properties.each((key, value) => {\n      // called for each item in the reader,\n      // first with key=main.some.thing, value=foo\n      // next with key=blah.some.thing, value=bar\n    });\n    \n    // get all properties at once\n    expect(properties.getAllProperties()).toEqual({\n      'main.some.thing': 'foo',\n      'blah.some.thing': 'bar',\n    })\n    \n\nChecking for the current number of properties that have been read into the reader:\n\n    var propertiesCount = properties.length;\n\nThe length is calculated on request, so if accessing this in a loop an efficiency would be achieved by caching the\nvalue.\n\nWhen duplicate names are found in the properties, the first one read will be replaced with the later one.\n\nTo get the complete set of properties, either loop through them with the `.each((key, value) => {})` iterator or\nuse the convenience method `getAllProperties` to return the complete set of flattened properties. \n\n### Saving changes\n\nOnce a file has been read and changes made, saving those changes to another file is as simple as running:\n\n```javascript\n// async/await ES6\nconst propertiesReader = require('properties-reader');\nconst props = propertiesReader(filePath, {writer: { saveSections: true }});\nawait props.save(filePath);\n\n// ES5 callback styles\nprops.save(filePath, function then(err, data) { ... });\n\n// ES5 promise style\nprops.save(filePath).then(onSaved, onSaveError);\n```\n\nTo output the properties without any section headings, set the `saveSections` option to `false`\n\nData Types\n==========\n\nProperties will automatically be converted to their regular data types when they represent true/false or numeric\nvalues. To get the original value without any parsing / type coercion applied, use `properties.getRaw('path.to.prop')`.\n\nFAQ / Breaking Changes\n======================\n\n## Duplicate Section Headings\n\nFrom version `2.0.0` the default behaviour relating to multiple `[section]` blocks with the same name has changed\nso combine the items of each same-named section into the one section. This is only visible when saving the items\n(via `reader.save()`).\n\nTo restore the previous behaviour which would allow duplicate `[...]` blocks to be created, supply an appender\nconfiguration with the property `allowDuplicateSections` set to `true`.\n\n```javascript\nconst propertiesReader = require('properties-reader');\nconst props = propertiesReader(filePath, 'utf-8', { allowDuplicateSections: true });\n```\n\nContributions\n=============\n\nIf you find bugs or want to change functionality, feel free to fork and pull request.\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Steve King\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/properties-reader/-/properties-reader-2.2.0.tgz#41d837fe143d8d5f2386b6a869a1975c0b2c595c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/properties-reader/-/properties-reader-2.2.0.tgz",
    "hash": "41d837fe143d8d5f2386b6a869a1975c0b2c595c",
    "integrity": "sha512-CgVcr8MwGoBKK24r9TwHfZkLLaNFHQ6y4wgT9w/XzdpacOOi5ciH4hcuLechSDAwXsfrGQtI2JTutY2djOx2Ow==",
    "registry": "npm",
    "packageName": "properties-reader",
    "cacheIntegrity": "sha512-CgVcr8MwGoBKK24r9TwHfZkLLaNFHQ6y4wgT9w/XzdpacOOi5ciH4hcuLechSDAwXsfrGQtI2JTutY2djOx2Ow== sha1-Qdg3/hQ9jV8jhraoaaGXXAssWVw="
  },
  "registry": "npm",
  "hash": "41d837fe143d8d5f2386b6a869a1975c0b2c595c"
}