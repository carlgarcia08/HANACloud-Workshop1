{
  "manifest": {
    "name": "npm-api",
    "description": "Node.js library for getting info from NPM’s API",
    "version": "1.0.1",
    "homepage": "https://github.com/doowb/npm-api",
    "author": {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    "contributors": [
      {
        "name": "0xflotus",
        "url": "https://github.com/0xflotus"
      },
      {
        "name": "Brian Woodward",
        "url": "https://twitter.com/doowb"
      },
      {
        "name": "Nachman Berkowitz",
        "url": "https://github.com/NachmanBerkowitz"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/doowb/npm-api.git"
    },
    "bugs": {
      "url": "https://github.com/doowb/npm-api/issues"
    },
    "license": "MIT",
    "files": [
      "index.js",
      "lib"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "keywords": [
      "api",
      "base",
      "downloads",
      "maintainer",
      "maintainers",
      "npm",
      "npm-api",
      "package",
      "repo",
      "repos",
      "repositories",
      "repository"
    ],
    "verb": {
      "run": true,
      "toc": false,
      "layout": "default",
      "tasks": [
        "readme"
      ],
      "plugins": [
        "gulp-format-md"
      ],
      "related": {
        "list": [
          "base",
          "download-stats"
        ]
      },
      "reflinks": [
        "verb"
      ],
      "lint": {
        "reflinks": true
      }
    },
    "devDependencies": {
      "gulp-format-md": "^2.0.0",
      "mocha": "^6.1.4"
    },
    "dependencies": {
      "clone-deep": "^4.0.1",
      "download-stats": "^0.3.4",
      "JSONStream": "^1.3.5",
      "moment": "^2.24.0",
      "node-fetch": "^2.6.0",
      "paged-request": "^2.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-npm-api-1.0.1-3def9b51afedca57db14ca0c970d92442d21c9c5-integrity/node_modules/npm-api/package.json",
    "readmeFilename": "README.md",
    "readme": "# npm-api [![NPM version](https://img.shields.io/npm/v/npm-api.svg?style=flat)](https://www.npmjs.com/package/npm-api) [![NPM monthly downloads](https://img.shields.io/npm/dm/npm-api.svg?style=flat)](https://npmjs.org/package/npm-api) [![NPM total downloads](https://img.shields.io/npm/dt/npm-api.svg?style=flat)](https://npmjs.org/package/npm-api) [![Linux Build Status](https://img.shields.io/travis/doowb/npm-api.svg?style=flat&label=Travis)](https://travis-ci.org/doowb/npm-api)\n\n> Node.js library for getting info from NPM’s API\n\nPlease consider following this project's author, [Brian Woodward](https://github.com/doowb), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save npm-api\n```\n\n## Usage\n\n```js\nvar NpmApi = require('npm-api');\n```\n\n## API\n\n### [NpmApi](index.js#L21)\n\nNpmApi constructor. Create an instance to work with maintainer and repository information.\n\n**Example**\n\n```js\nlet npm = new NpmApi();\n```\n\n### [.view](index.js#L58)\n\nCreate a new instance of `View` or get an existing instance to work with npm couchdb views.\n\n**Params**\n\n* `name` **{String}**: Name of the couchdb view to work with.\n* `returns` **{Object}** `View`: instance\n\n**Example**\n\n```js\nvar view = npm.view('byUser');\n```\n\n### [.list](index.js#L84)\n\nCreate a new instance of `List` or get an existing instance to work with npm couchdb list.\n\n**Params**\n\n* `name` **{String}**: Name of the couchdb list to work with.\n* `view` **{String|Object}**: Name or instance of a `view` to work with.\n* `returns` **{Object}** `List`: instance\n\n**Example**\n\n```js\nvar list = npm.list('sortCount', 'byUser');\n```\n\n### [.repo](index.js#L118)\n\nCreate an instance of a `repo` to work with.\n\n**Params**\n\n* `name` **{String}**: Name of the repo as it's published to npm.\n* `returns` **{Object}**: Instance of a `Repo` model to work with.\n\n**Example**\n\n```js\nvar repo =  npm.repo('micromatch');\n```\n\n### [.maintainer](index.js#L142)\n\nCreate an instance of a `maintainer` to work with.\n\n**Params**\n\n* `name` **{String}**: Npm username of the maintainer.\n* `returns` **{Object}**: Instance of a `Maintainer` model to work with.\n\n**Example**\n\n```js\nvar maintainer =  npm.maintainer('doowb');\n```\n\n## Models\n\n### [BaseModel](lib/models/base.js#L17)\n\nBase model to include common plugins.\n\n**Params**\n\n* `store` **{Object}**: Cache store instance to use.\n\n### [Maintainer](lib/models/maintainer.js#L19)\n\nMaintainer constructor. Create an instance of an npm maintainer by maintainer name.\n\n**Params**\n\n* `name` **{String}**: Name of the npm maintainer to get information about.\n\n**Example**\n\n```js\nconst maintainer = new Maintainer('doowb');\n```\n\n### [.repos](lib/models/maintainer.js#L43)\n\nGet the repositories owned by this maintainer.\n\n* `returns` **{Promise}**: Returns array of repository names when promise resolves.\n\n**Example**\n\n```js\nmaintainer.repos()\n  .then(function(repos) {\n    console.log(repos);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### [Repo](lib/models/repo.js#L18)\n\nRepo constructor. Create an instance of an npm repo by repo name.\n\n**Params**\n\n* `name` **{String}**: Name of the npm repo to get information about.\n\n**Example**\n\n```js\nconst repo = new Repo('micromatch');\n```\n\n### [.package](lib/models/repo.js#L41)\n\nGet the repo's published package.json.\n\n* `returns` **{Promise}**: Returns the package.json object when promise resolves.\n\n**Example**\n\n```js\nrepo.package()\n  .then(function(pkg) {\n    console.log(pkg);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### [.version](lib/models/repo.js#L73)\n\nGet the repo's published package.json value for the specified version.\n\n**Params**\n\n* `version` **{String}**: Specific version to retrieve.\n* `returns` **{Promise}**: Returns the package.json object for the specified version when promise resolves.\n\n**Example**\n\n```js\nrepo.version('0.2.0')\n  .then(function(pkg) {\n    console.log(pkg);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### [.dependencies](lib/models/repo.js#L101)\n\nGet the repo's dependencies for the specified version.\n\n**Params**\n\n* `version` **{String}**: Specific version to retrieve. Defaults to `latest`.\n* `returns` **{Promise}**: Returns the dependencies object for the specified version when promise resolves.\n\n**Example**\n\n```js\nrepo.dependencies()\n  .then(function(dependencies) {\n    console.log(dependencies);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### [.devDependencies](lib/models/repo.js#L122)\n\nGet the repo's devDependencies for the specified version.\n\n**Params**\n\n* `version` **{String}**: Specific version to retrieve. Defaults to `latest`.\n* `returns` **{Promise}**: Returns the devDependencies object for the specified version when promise resolves.\n\n**Example**\n\n```js\nrepo.devDependencies()\n  .then(function(devDependencies) {\n    console.log(devDependencies);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### [.prop](lib/models/repo.js#L144)\n\nGet the specified property from the repo's package.json for the specified version.\n\n**Params**\n\n* `prop` **{String}**: Name of the property to get.\n* `version` **{String}**: Specific version to retrieve. Defaults to `latest`.\n* `returns` **{Promise}**: Returns the property for the specified version when promise resolves.\n\n**Example**\n\n```js\nrepo.prop('author')\n  .then(function(author) {\n    console.log(author);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n## Registry queries\n\n### [View](lib/view.js#L21)\n\nView constructor. Create an instance of a view associated with a couchdb view in the npm registry.\n\n**Params**\n\n* `name` **{String}**: Name of couchdb view to use.\n* `returns` **{Object}**: instance of `View`\n\n**Example**\n\n```js\nconst view = new View('dependedUpon');\n```\n\n### [.query](lib/view.js#L44)\n\nQuery the couchdb view with the provided parameters.\n\n**Params**\n\n* `params` **{Object}**: URL query parameters to pass along to the couchdb view.\n* `returns` **{Promise}**: Results of the query when promise is resolved.\n\n**Example**\n\n```js\nlet results = await view.query({\n  group_level: 2,\n  startkey: JSON.stringify(['micromatch']),\n  endkey: JSON.stringify(['micromatch', {}])\n});\n```\n\n### [.stream](lib/view.js#L89)\n\nQuery the couchdb view with the provided parameters and return a stream of results.\n\n**Params**\n\n* `params` **{Object}**: URL query parameters to pass along to the couchdb view.\n* `returns` **{Stream}**: Streaming results of the query.\n\n**Example**\n\n```js\nview.stream({\n  group_level: 2,\n  startkey: JSON.stringify(['micromatch']),\n  endkey: JSON.stringify(['micromatch', {}])\n})\n.on('data', (data) => {\n  console.log(data);\n});\n```\n\n### [.url](lib/view.js#L109)\n\nBuild a formatted url with the provided parameters.\n\n**Params**\n\n* `query` **{Object}**: URL query parameters.\n* `returns` **{String}**: formatted url string\n\n### [List](lib/list.js#L22)\n\nList constructor. Create an instance of a list associated with a couchdb list in the npm registry.\n\n**Params**\n\n* `name` **{String}**: Name of couchdb list to use.\n* `view` **{Object}**: Instance of a View to use with the list.\n* `returns` **{Object}**: instance of `List`\n\n**Example**\n\n```js\nlet list = new List('dependedUpon', view);\n```\n\n### [.query](lib/list.js#L42)\n\nQuery the couchdb list with the provided parameters.\n\n**Params**\n\n* `params` **{Object}**: URL query parameters to pass along to the couchdb list.\n* `returns` **{Promise}**: Results of the query when promise is resolved.\n\n**Example**\n\n```js\nlet results = await list.query({ key: JSON.stringify(['micromatch']) })\n```\n\n### [.url](lib/list.js#L59)\n\nBuild a formatted url with the provided parameters.\n\n**Params**\n\n* `query` **{Object}**: URL query parameters.\n* `returns` **{String}**: formatted url string\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [base](https://www.npmjs.com/package/base): Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks | [homepage](https://github.com/node-base/base \"Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks\")\n* [download-stats](https://www.npmjs.com/package/download-stats): Get and calculate npm download stats for npm modules. | [homepage](https://github.com/doowb/download-stats \"Get and calculate npm download stats for npm modules.\")\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 115 | [doowb](https://github.com/doowb) |  \n| 1   | [0xflotus](https://github.com/0xflotus) |  \n| 1   | [Hypnosphi](https://github.com/Hypnosphi) |  \n| 1   | [NachmanBerkowitz](https://github.com/NachmanBerkowitz) |  \n\n### Author\n\n**Brian Woodward**\n\n* [GitHub Profile](https://github.com/doowb)\n* [Twitter Profile](https://twitter.com/doowb)\n* [LinkedIn Profile](https://linkedin.com/in/woodwardbrian)\n\n### License\n\nCopyright © 2021, [Brian Woodward](https://github.com/doowb).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on January 20, 2021._",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2019, Brian Woodward.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/npm-api/-/npm-api-1.0.1.tgz#3def9b51afedca57db14ca0c970d92442d21c9c5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/npm-api/-/npm-api-1.0.1.tgz",
    "hash": "3def9b51afedca57db14ca0c970d92442d21c9c5",
    "integrity": "sha512-4sITrrzEbPcr0aNV28QyOmgn6C9yKiF8k92jn4buYAK8wmA5xo1qL3II5/gT1r7wxbXBflSduZ2K3FbtOrtGkA==",
    "registry": "npm",
    "packageName": "npm-api",
    "cacheIntegrity": "sha512-4sITrrzEbPcr0aNV28QyOmgn6C9yKiF8k92jn4buYAK8wmA5xo1qL3II5/gT1r7wxbXBflSduZ2K3FbtOrtGkA== sha1-Pe+bUa/tylfbFMoMlw2SRC0hycU="
  },
  "registry": "npm",
  "hash": "3def9b51afedca57db14ca0c970d92442d21c9c5"
}