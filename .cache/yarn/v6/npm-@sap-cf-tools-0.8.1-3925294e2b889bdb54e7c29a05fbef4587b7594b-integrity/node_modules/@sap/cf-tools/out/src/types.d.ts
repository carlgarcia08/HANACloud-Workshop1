export declare const OK = "OK";
export declare const NEW_LINE = "\n";
export declare const CF_PAGE_SIZE: number;
export declare const DEFAULT_TARGET = "Default (no targets)";
export interface CliResult {
    stdout: string;
    stderr: string;
    error?: string;
    exitCode: number;
}
export declare enum CF_CMD_EXIT_CODE {
    OK = 0,
    ERROR = -1,
    CANCEL_REQ = -2,
    CANCELED = -3
}
export interface CancellationToken {
    isCancellationRequested: boolean;
    onCancellationRequested: any;
}
interface Progress<T> {
    report(value: T): void;
}
export interface ProgressHandler {
    progress: Progress<{
        message?: string;
        increment?: number;
    }>;
    cancelToken: CancellationToken;
}
export interface CFTarget {
    label: string;
    isCurrent: boolean;
    isDirty: boolean;
}
export interface ServiceInstanceInfo {
    label: string;
    serviceName: string;
    tags?: string[];
    alwaysShow?: boolean;
    plan_guid?: string;
    credentials?: any;
}
export interface ServiceInfo {
    label: string;
    guid: string;
    service_plans_url: string;
    description: string;
}
export interface PlanInfo {
    label: string;
    guid: string;
    description: string;
}
export interface CFResource {
    metadata: any;
    entity: any;
}
export interface ServiceTypeInfo {
    name: string;
    plan: string;
    tag: string;
    prompt: string;
    plans?: PlanInfo[];
    serviceKeyName?: string;
    serviceKeyParam?: any;
    ups?: {
        tag?: string;
        isShow?: boolean;
    };
    allowCreate?: {
        serviceName?: string;
        plan?: string;
        tag?: string;
        name?: string;
        namePrompt?: string;
        getParams?: () => Promise<any>;
    };
}
export declare enum eFilters {
    name = "name",
    space_guid = "space_guid",
    service_plan_guid = "service_plan_guid",
    service_binding_guid = "service_binding_guid",
    gateway_name = "gateway_name",
    organization_guid = "organization_guid",
    service_key_guid = "service_key_guid",
    service_guid = "service_guid",
    service_instance_guid = "service_instance_guid",
    user_guid = "user_guid",
    manager_guid = "manager_guid",
    billing_manager_guid = "billing_manager_guid",
    auditor_guid = "auditor_guid",
    status = "status",
    label = "label"
}
export declare enum eOperation {
    eq = ":",
    be = ">=",
    le = "<=",
    l = "<",
    b = ">",
    IN = "%20IN%20"
}
export interface IServiceFilters {
    key: eFilters;
    value: string;
    op?: eOperation;
}
export declare enum eOrderDirection {
    asc = 0,
    desc = 1
}
export interface IServiceQuery {
    filters?: IServiceFilters[];
    'results-per-page'?: number;
    page?: number;
    'order-direction'?: eOrderDirection;
}
export interface ServiceBinding {
    env: string;
    id: string;
    type: string;
    version: string;
}
export interface UAAInfo {
    apiurl: string;
    clientid: string;
    clientsecret: string;
    identityzone: string;
    identityzoneid: string;
    sburl: string;
    tenantid: string;
    tenantmode: string;
    uaadomain: string;
    url: string;
    verificationkey: string;
    xsappname: string;
}
export interface ServiceKey {
    binding: ServiceBinding;
    catalogs: any;
    endpoints: any;
    preserve_host_header: boolean;
    "sap.cloud.service": string;
    systemid: string;
    uaa: UAAInfo;
    url: string;
}
export interface ITarget {
    'api endpoint': string;
    'api version': string;
    user: string;
    org?: string;
    space?: string;
}
export interface UpsTypeInfo {
    instanceName: string;
    space_guid?: string;
    syslog_drain_url?: string;
    credentials?: unknown;
    route_service_url?: string;
    tags?: string[];
}
export {};
