"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cfGetInstanceKeyParameters = exports.cfCreateUpsInstance = exports.cfLogout = exports.cfGetTarget = exports.cfGetAuthToken = exports.cfGetInstanceMetadata = exports.cfGetInstanceCredentials = exports.cfGetServiceKeys = exports.cfBindLocalUps = exports.cfBindLocalServices = exports.cfGetServicePlansList = exports.cfGetServicePlans = exports.cfGetServices = exports.cfGetSpaceServices = exports.cfGetUpsInstances = exports.cfGetTargets = exports.cfSetOrgSpace = exports.cfGetServiceInstances = exports.cfGetAvailableSpaces = exports.cfGetAvailableOrgs = exports.cfLogin = exports.cfCreateService = exports.cfGetConfigFileField = exports.cfGetConfigFilePath = exports.clearCacheServiceInstances = void 0;
const fsextra = require("fs-extra");
const os = require("os");
const path = require("path");
const comment_json_1 = require("comment-json");
const _ = require("lodash");
const cli_1 = require("./cli");
const messages_1 = require("./messages");
const types_1 = require("./types");
const utils_1 = require("./utils");
function getGuid(resource) {
    return _.get(resource, "metadata.guid", '');
}
function getName(resource) {
    return _.get(resource, "entity.name", '');
}
function getLabel(resource) {
    return _.get(resource, "entity.label", '');
}
function getDescription(resource) {
    return _.get(resource, "entity.description", '');
}
function getSpaceFieldGUID(spaceField) {
    return _.get(spaceField, "GUID", '');
}
function getOrgGUID(resource) {
    return _.get(resource, "entity.organization_guid", '');
}
function getTags(resource) {
    return _.get(resource, "entity.tags", []);
}
function getCredentials(resource) {
    return _.get(resource, "entity.credentials", {});
}
let cacheServiceInstanceTypes = {};
function clearCacheServiceInstances() {
    cacheServiceInstanceTypes = {};
}
exports.clearCacheServiceInstances = clearCacheServiceInstances;
function cfGetConfigFilePath() {
    return path.join(_.get(process, "env.CF_HOME", os.homedir()), ".cf", "config.json");
}
exports.cfGetConfigFilePath = cfGetConfigFilePath;
function cfGetConfigFileField(field) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const configJson = comment_json_1.parse(yield fsextra.readFile(cfGetConfigFilePath(), "utf8"));
            return _.get(configJson, `${field}`);
        }
        catch (error) {
        }
    });
}
exports.cfGetConfigFileField = cfGetConfigFileField;
function padQuerySpace(query) {
    return __awaiter(this, void 0, void 0, function* () {
        query = utils_1.ensureQuery(query);
        const filter = _.find(query.filters, ['key', types_1.eFilters.space_guid]);
        if (!_.get(filter, 'value')) {
            const space = getSpaceFieldGUID(yield cfGetConfigFileField("SpaceFields"));
            if (!space) {
                throw new Error(messages_1.messages.cf_setting_not_set);
            }
            query.filters = _.concat(query.filters, [{ key: types_1.eFilters.space_guid, value: space }]);
        }
        return query;
    });
}
const ENTITY_STATE_INPROGRESS = "in progress";
const ENTITY_STATE_FAILED = "failed";
function composeQuery(query) {
    query = utils_1.ensureQuery(query);
    function _queryFilters(filters) {
        return _.compact(_.values(_.map(filters, filter => {
            const value = _.get(filter, 'value');
            if (value) {
                return `q=${filter.key}${filter.op || types_1.eOperation.eq}${value}`;
            }
        })));
    }
    function _queryParams(object) {
        return _.compact(_.map(_.keys(object), key => {
            const value = _.get(object, key);
            if (value) {
                return `${key}=${value}`;
            }
        }));
    }
    return _.compact(_.concat(_queryFilters(query.filters).join(';'), _queryParams(_.omit(query, 'filters')))).join('&');
}
function waitForEntity(resolve, reject, resource, attempt, maxNumberOfAttemps, jobFunction, progress) {
    if (attempt < maxNumberOfAttemps) {
        if (progress.cancelToken.isCancellationRequested) {
            reject(new Error(messages_1.messages.create_service_canceled_by_requester));
        }
        const state = _.get(resource, "entity.last_operation.state");
        if (state === ENTITY_STATE_INPROGRESS) {
            progress.progress.report({ "message": `\n${messages_1.messages.service_creation_started}`, increment: Math.floor(1 / maxNumberOfAttemps * 100) });
            setTimeout(() => {
                jobFunction().then(retriedResource => {
                    waitForEntity(resolve, reject, retriedResource, attempt + 1, maxNumberOfAttemps, jobFunction, progress);
                }).catch(error => {
                    reject(error);
                });
            }, 2000);
        }
        else if (state === ENTITY_STATE_FAILED) {
            reject(new Error(messages_1.messages.failed_creating_entity(_.get(resource, "entity.last_operation.description"), getName(resource))));
        }
        else {
            progress.progress.report({ "message": `\n${messages_1.messages.service_creation_started}`, increment: 100 });
            resolve(resource);
        }
    }
    else {
        resolve(messages_1.messages.exceed_number_of_attempts(getName(resource)));
    }
}
function execQuery(args, fncParse, reverseErrorOrder) {
    return __awaiter(this, void 0, void 0, function* () {
        const cliResult = yield cli_1.Cli.execute(args.query, args.options, args.token);
        if (cliResult.exitCode !== 0) {
            throw new Error(reverseErrorOrder ?
                (cliResult.stdout || cliResult.stderr || cliResult.error) :
                (cliResult.error || cliResult.stderr || cliResult.stdout));
        }
        return fncParse ? yield fncParse(comment_json_1.parse(cliResult.stdout)) : cliResult.stdout || cliResult.stderr;
    });
}
function execTotal(args, fncParse) {
    return __awaiter(this, void 0, void 0, function* () {
        const collection = [];
        let query = args.query;
        while (query) {
            const result = comment_json_1.parse(yield execQuery({ query: ["curl", query], options: args.options, token: args.token }));
            for (const resource of _.get(result, "resources", [])) {
                collection.push(fncParse ? yield fncParse(resource) : resource);
            }
            query = result.next_url;
        }
        return _.compact(collection);
    });
}
function getCachedServiceInstanceLabel(service) {
    if (_.get(service, ['entity', 'service_url'])) {
        if (!cacheServiceInstanceTypes[service.entity.service_url]) {
            cacheServiceInstanceTypes[service.entity.service_url] = execQuery({ query: ["curl", service.entity.service_url] }, (data) => {
                return Promise.resolve(getLabel(data));
            }, true);
        }
        return cacheServiceInstanceTypes[service.entity.service_url];
    }
    return Promise.resolve('unknown');
}
function getServiceInstance(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield execQuery({ query: ["curl", `/v2/service_instances?${composeQuery(query)}`], token }, (data) => data);
        if (_.size(_.get(result, 'resources')) === 1) {
            return _.head(result.resources);
        }
        throw new Error(messages_1.messages.service_not_found(decodeURIComponent(_.get(_.find(query.filters, ['key', types_1.eFilters.name]), 'value')) || 'unknown'));
    });
}
function cfCreateService(planGuid, instanceName, params, tags, progress, maxNumberOfAttemps) {
    return __awaiter(this, void 0, void 0, function* () {
        const spaceGuid = getSpaceFieldGUID(yield cfGetConfigFileField("SpaceFields"));
        if (!spaceGuid) {
            throw new Error(messages_1.messages.space_not_set);
        }
        maxNumberOfAttemps = _.isNil(maxNumberOfAttemps) ? 45 : maxNumberOfAttemps;
        progress = _.defaults(progress, { progress: { report: () => '' } }, { cancelToken: { isCancellationRequested: false, onCancellationRequested: () => '' } });
        const request = { name: instanceName, space_guid: spaceGuid, service_plan_guid: planGuid, parameters: params, tags };
        const result = yield execQuery({ query: ["curl", "/v2/service_instances?accepts_incomplete=true", "-d", comment_json_1.stringify(request), "-X", "POST"], token: progress.cancelToken });
        progress.progress.report({ "message": `\n${messages_1.messages.service_creation_started}`, increment: 1 });
        const query = { filters: [{ key: types_1.eFilters.name, value: encodeURIComponent(instanceName) }, { key: types_1.eFilters.space_guid, value: spaceGuid }] };
        return new Promise((resolve, reject) => {
            waitForEntity(resolve, reject, comment_json_1.parse(result), 0, maxNumberOfAttemps, () => getServiceInstance(query, progress.cancelToken), progress);
        });
    });
}
exports.cfCreateService = cfCreateService;
function cfLogin(endpoint, user, pwd) {
    return __awaiter(this, void 0, void 0, function* () {
        let result;
        try {
            result = yield execQuery({ query: ["login", "-a", endpoint, "-u", user, "-p", pwd, "-o", "no-org-for-now", "-s", "no-space-for-now"], options: { env: { "CF_COLOR": "false" } } }, undefined, true);
        }
        catch (e) {
            result = _.get(e, 'message', '');
        }
        return result.includes(`Authenticating...${types_1.NEW_LINE}${types_1.OK}`) ? types_1.OK : result;
    });
}
exports.cfLogin = cfLogin;
function cfGetAvailableOrgs(query) {
    return __awaiter(this, void 0, void 0, function* () {
        const params = composeQuery(query);
        return execTotal({ query: "/v2/organizations" + (params ? `?${params}` : "") }, (data) => {
            return Promise.resolve({ label: getName(data), guid: getGuid(data) });
        });
    });
}
exports.cfGetAvailableOrgs = cfGetAvailableOrgs;
function cfGetAvailableSpaces(orgGuid) {
    return __awaiter(this, void 0, void 0, function* () {
        return execTotal({ query: orgGuid ? `/v2/organizations/${orgGuid}/spaces` : "/v2/spaces" }, (resource) => {
            return Promise.resolve({
                label: getName(resource),
                guid: getGuid(resource),
                orgGUID: getOrgGUID(resource)
            });
        });
    });
}
exports.cfGetAvailableSpaces = cfGetAvailableSpaces;
function cfGetServiceInstances(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        const serviceNames = [];
        const collection = yield execTotal({ query: `v2/service_instances?${composeQuery(yield padQuerySpace(query))}`, token }, (info) => {
            const promise = getCachedServiceInstanceLabel(info);
            serviceNames.push(promise);
            return Promise.resolve({ "label": getName(info), "serviceName": promise, plan_guid: _.get(info, "entity.service_plan_guid"), tags: getTags(info), credentials: getCredentials(info) });
        });
        if (!_.size(serviceNames)) {
            return [];
        }
        return Promise.race(serviceNames).then(() => __awaiter(this, void 0, void 0, function* () {
            const instances = [];
            for (const instance of collection) {
                let serviceName;
                try {
                    serviceName = yield _.get(instance, 'serviceName');
                }
                catch (e) {
                    serviceName = 'unknown';
                }
                instances.push({
                    label: _.get(instance, 'label'),
                    serviceName: serviceName,
                    plan_guid: _.get(instance, 'plan_guid'),
                    tags: _.get(instance, 'tags'),
                    credentials: _.get(instance, 'credentials')
                });
            }
            return _.compact(instances);
        }));
    });
}
exports.cfGetServiceInstances = cfGetServiceInstances;
function cfSetOrgSpace(org, space) {
    return __awaiter(this, void 0, void 0, function* () {
        yield execQuery({ query: _.concat(["target", "-o", org], (space ? ["-s", space] : [])) });
        clearCacheServiceInstances();
        cfGetServiceInstances();
    });
}
exports.cfSetOrgSpace = cfSetOrgSpace;
function cfGetTargets() {
    return __awaiter(this, void 0, void 0, function* () {
        const targets = yield execQuery({ query: ["targets"] });
        if (_.includes(targets, "No targets have been saved yet") || _.includes(targets, "is not a registered command")) {
            return [{ label: types_1.DEFAULT_TARGET, isCurrent: true, isDirty: false }];
        }
        const targetSubstrings = _.compact(_.map(targets.split(types_1.NEW_LINE), targetSubstring => targetSubstring.trim()));
        return _.map(targetSubstrings, targetSubstring => {
            const parentthesisPos = targetSubstring.indexOf("(current");
            if (parentthesisPos > 0) {
                targetSubstring = targetSubstring.substring(0, parentthesisPos);
                return { label: targetSubstring.trim(), isCurrent: true, isDirty: targetSubstring.includes("modified") };
            }
            return { label: targetSubstring, isCurrent: false, isDirty: false };
        });
    });
}
exports.cfGetTargets = cfGetTargets;
function cfGetUpsInstances(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return execTotal({ query: `v2/user_provided_service_instances?${composeQuery(yield padQuerySpace(query))}`, token }, (info) => {
            return Promise.resolve({ label: getName(info), serviceName: _.get(info, "entity.type"), tags: getTags(info), credentials: getCredentials(info) });
        });
    });
}
exports.cfGetUpsInstances = cfGetUpsInstances;
function getServices(url, query, cancellationToken) {
    return execTotal({ query: `${url}?${composeQuery(query)}`, token: cancellationToken }, (service) => {
        return Promise.resolve({
            label: getLabel(service),
            service_plans_url: _.get(service, "entity.service_plans_url"),
            guid: getGuid(service),
            description: getDescription(service)
        });
    });
}
function cfGetSpaceServices(query, spaceGUID, cancellationToken) {
    return __awaiter(this, void 0, void 0, function* () {
        spaceGUID = spaceGUID || (yield padQuerySpace({})).filters[0].value;
        return getServices(`/v2/spaces/${spaceGUID}/services`, query, cancellationToken);
    });
}
exports.cfGetSpaceServices = cfGetSpaceServices;
function cfGetServices(query, cancellationToken) {
    return __awaiter(this, void 0, void 0, function* () {
        return getServices("/v2/services", query, cancellationToken);
    });
}
exports.cfGetServices = cfGetServices;
function cfGetServicePlans(servicePlansUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return execTotal({ query: servicePlansUrl }, (data) => {
            return Promise.resolve({ label: getName(data), guid: getGuid(data), description: getDescription(data) });
        });
    });
}
exports.cfGetServicePlans = cfGetServicePlans;
function cfGetServicePlansList(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return execTotal({ query: `/v2/service_plans?${composeQuery(query)}`, token }, (data) => {
            return Promise.resolve({ label: getName(data), guid: getGuid(data), description: getDescription(data) });
        });
    });
}
exports.cfGetServicePlansList = cfGetServicePlansList;
function cfBindLocalServices(filePath, instanceNames, tags, serviceKeyNames, serviceKeyParams) {
    return __awaiter(this, void 0, void 0, function* () {
        yield execQuery({
            query: [
                "bind-local",
                "-path",
                filePath,
                "-service-names",
                ..._.map(instanceNames, encodeURI),
                ...(_.size(tags) ? _.concat(["-tags"], tags) : []),
                ...(_.size(serviceKeyNames) ? _.concat(["-service-keys"], serviceKeyNames) : []),
                ...(_.size(serviceKeyParams) ? _.concat(["-params"], _.map(serviceKeyParams, param => { return comment_json_1.stringify(param); })) : [])
            ]
        });
    });
}
exports.cfBindLocalServices = cfBindLocalServices;
function cfBindLocalUps(filePath, instanceNames, tags) {
    return __awaiter(this, void 0, void 0, function* () {
        yield execQuery({
            query: _.concat(["bind-local-ups", "-path", filePath], _.reduce(instanceNames, (result, instanceName) => {
                result = _.concat(result, [`-service-names`, `${encodeURI(instanceName)}`]);
                return result;
            }, []), _.reduce(tags, (result, tag) => {
                result = _.concat(result, [`-tags`, `${tag}`]);
                return result;
            }, []))
        });
    });
}
exports.cfBindLocalUps = cfBindLocalUps;
function cfGetServiceKeys(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        if (_.isEmpty(_.intersection([types_1.eFilters.name, types_1.eFilters.service_instance_guid], _.map(_.get(query, 'filters'), 'key')))) {
            throw new Error(messages_1.messages.no_valid_filters);
        }
        return execTotal({ query: `v2/service_keys?${composeQuery(query)}`, token });
    });
}
exports.cfGetServiceKeys = cfGetServiceKeys;
function cfGetInstanceCredentials(query, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return _.compact(_.map(yield cfGetServiceKeys(query, token), 'entity.credentials'));
    });
}
exports.cfGetInstanceCredentials = cfGetInstanceCredentials;
function cfGetInstanceMetadata(instanceName) {
    return __awaiter(this, void 0, void 0, function* () {
        const instance = yield getServiceInstance(yield padQuerySpace({ filters: [{ key: types_1.eFilters.name, value: encodeURIComponent(instanceName) }] }));
        const plans = yield cfGetServicePlansList({
            filters: [
                { key: types_1.eFilters.service_guid, value: _.get(instance, ['entiry', 'service_guid']) },
                { key: types_1.eFilters.service_instance_guid, value: _.get(instance, ['metadata', 'guid']) }
            ]
        });
        let serviceName;
        try {
            serviceName = yield getCachedServiceInstanceLabel(instance);
        }
        catch (e) {
            serviceName = 'unknown';
        }
        return {
            serviceName: _.get(instance, ['entity', 'name']),
            plan: _.head(plans).label,
            plan_guid: _.get(instance, ['entity', 'service_plan_guid']),
            service: serviceName
        };
    });
}
exports.cfGetInstanceMetadata = cfGetInstanceMetadata;
function cfGetAuthToken() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield execQuery({ query: ["oauth-token"] });
    });
}
exports.cfGetAuthToken = cfGetAuthToken;
function cfGetTarget(weak) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!weak) {
            yield cfGetAuthToken();
        }
        const data = yield execQuery({ query: ["target"], options: { env: { "CF_COLOR": "false" } } });
        const result = {};
        _.each(_.compact(_.split(data, '\n')), item => {
            item = _.replace(_.trim(item), /^['"]|['"]$/g, '');
            const sep = _.indexOf(item, ':');
            if (sep > -1) {
                result[`${_.trim(_.join(_.slice(item, 0, sep), ''))}`] = _.trim(_.join(_.slice(item, sep + 1), ''));
            }
        });
        return result;
    });
}
exports.cfGetTarget = cfGetTarget;
function cfLogout() {
    return __awaiter(this, void 0, void 0, function* () {
        yield execQuery({ query: ["logout"] });
    });
}
exports.cfLogout = cfLogout;
function cfCreateUpsInstance(info) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = { "name": info.instanceName };
        let spaceGuid = info.space_guid;
        if (!spaceGuid) {
            spaceGuid = getSpaceFieldGUID(yield cfGetConfigFileField("SpaceFields"));
            if (!spaceGuid) {
                throw new Error(messages_1.messages.space_not_set);
            }
        }
        _.merge(data, { "space_guid": spaceGuid }, info.credentials ? { "credentials": info.credentials } : {}, info.route_service_url ? { "route_service_url": info.route_service_url } : {}, info.syslog_drain_url ? { "syslog_drain_url": info.syslog_drain_url } : {}, info.tags ? { "tags": info.tags } : {});
        return comment_json_1.parse(yield execQuery({ query: ["curl", `/v2/user_provided_service_instances`, '-d', comment_json_1.stringify(data), "-X", "POST"] }));
    });
}
exports.cfCreateUpsInstance = cfCreateUpsInstance;
function cfGetInstanceKeyParameters(instanceName) {
    return __awaiter(this, void 0, void 0, function* () {
        let query = { filters: [{ key: types_1.eFilters.name, value: encodeURIComponent(instanceName) }] };
        const collection = yield execTotal({ query: `v2/service_instances?${composeQuery(yield padQuerySpace(query))}` });
        if (!_.size(collection)) {
            return undefined;
        }
        query = { filters: [{ key: types_1.eFilters.service_instance_guid, value: _.get(collection, ["0", "metadata", "guid"]) }] };
        let keys = yield cfGetServiceKeys(query);
        if (!_.size(keys)) {
            yield cli_1.Cli.execute(["create-service-key", encodeURIComponent(instanceName), "key"]);
            query.filters.push({ key: types_1.eFilters.name, value: "key" });
            keys = yield cfGetServiceKeys(query);
        }
        return _.get(keys, ["0", "entity", "credentials"]);
    });
}
exports.cfGetInstanceKeyParameters = cfGetInstanceKeyParameters;
//# sourceMappingURL=cf-local.js.map