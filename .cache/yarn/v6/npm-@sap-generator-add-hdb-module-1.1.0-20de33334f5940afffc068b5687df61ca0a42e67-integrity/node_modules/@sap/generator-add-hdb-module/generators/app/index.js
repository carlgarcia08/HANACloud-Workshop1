'use strict';
const path = require( 'path' );
const Generator = require( 'yeoman-generator' );
const types = require( '@sap-devx/yeoman-ui-types' );
const CONFIG_FILE_NAME = 'SAP-HDB-Module-Config-';
const fs = require( 'fs' );
const Mta = require( '@sap/mta-lib' ).Mta;
var os = require( 'os' );
const rimraf = require( 'rimraf' );
module.exports = class extends Generator {
    constructor( args, opts ) {
        super( args, opts );
        this.opts = opts;
        const configPath = path.join( os.tmpdir(), CONFIG_FILE_NAME + Date.now() + '.json' );
        this.generatorBaseModuleOptions = {
            configPath,
            defaultName: 'db',
            mtaFilePath: null,
            mtaFilesPathsList: null,
            targetFolderPath: undefined,
            addMtaId: false,
            noTargetFolder: false,
            relativeTargetFolderPath: undefined,
            prompts: null,
            registerSetOption: ( setOptionFunction ) =>{
                this.setBaseModuleOption = setOptionFunction;
            }
        };

        this.setPromptsCallback = fn => {
            if( this.generatorBaseModuleOptions.prompts ) {
                this.generatorBaseModuleOptions.prompts.setCallback( fn );
            }
        };

        const prompts = opts.prompts || new types.Prompts( [] );
        this.generatorBaseModuleOptions.prompts = prompts;
        this.generatorBaseModuleOptions.mtaFilePath = opts && opts.data ? opts.data.mtaFilePath : undefined;
        this.generatorBaseModuleOptions.mtaFilesPathsList = opts && opts.data ? opts.data.mtaFilesPathsList : undefined;
        this.projectDetails = {};
    }

    async initializing() {
        const opts = {
            baseModuleOptions: this.generatorBaseModuleOptions,
            projectDetails: this.projectDetails,
            vscode: this.opts.vscode
        };
        await this.composeWith(
            require.resolve( path.join( '@sap/generator-base-mta-module', 'generators', 'app' ) ), this.generatorBaseModuleOptions );

        await this.composeWith( require.resolve( path.join( '..', 'hdb_module_app' ) ), opts );
    }

    async prompting() {
        if( this.opts && this.opts.projectInformation &&
            this.opts.projectInformation.basicInformation &&
            this.opts.projectInformation.basicInformation.projectName ) {
            const applicationId = this.opts.projectInformation.mtaInformation.applicationId;
            const applicationVersion = this.opts.projectInformation.mtaInformation.applicationVersion;
            const schemaVersion = '2.1';
            const mtaDescriptor = {};
            mtaDescriptor['_schema-version'] = schemaVersion;
            mtaDescriptor.ID = applicationId;
            mtaDescriptor.version = applicationVersion;
            const projectName = this.opts.projectInformation.basicInformation.projectName;
            this.projectDetails['projectFolder'] = path.join( this.contextRoot, this.opts.projectInformation.basicInformation.projectName );
            this.projectDetails[ 'projectName' ] = projectName;

            try {
                let tmpProjectFolderPath = path.join( os.tmpdir(), projectName );
                tmpProjectFolderPath = fs.mkdtempSync( tmpProjectFolderPath );
                this.projectDetails['tmpProjectFolderPath'] = tmpProjectFolderPath;
                const mta = new Mta( tmpProjectFolderPath );
                await mta.create( mtaDescriptor );
                await mta.save();
                this.setBaseModuleOption( 'mtaFilePath', path.join( tmpProjectFolderPath, 'mta.yaml' ) );
                this.setBaseModuleOption( 'targetFolderPath', tmpProjectFolderPath );
            } catch( e ) {
                this.env.error( e );
            }
        }
    }

    async end() {
        try {
            fs.unlinkSync( this.generatorBaseModuleOptions.configPath );
        } catch( err ) {
            this.log( `Failed to remove: ${this.generatorBaseModuleOptions.configPath}` );
        }

        try {
            if( this.projectDetails && this.projectDetails.tmpProjectFolderPath ){
                rimraf( this.projectDetails.tmpProjectFolderPath, () => { /* no-op */ });
            }
        } catch( err ) {
            this.log( `Failed to remove: ${this.projectDetails.tmpProjectFolderPath}` );
        }
    }
};
