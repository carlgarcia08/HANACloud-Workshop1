'use strict';
const Utils = require( './hdb_module_app/Utils' );
const isValid = ( text, errorMessge ) => {
    if( RegExp( /[a-zA-Z]/ ).test( text.charAt( 0 ) ) &&
        RegExp( /^[a-zA-Z0-9._-]+$/ ).test( text ) &&
        !RegExp( /\.\./ ).test( text ) &&
        !RegExp( /\.-/ ).test( text ) &&
        !RegExp( /\.[0-9]/ ).test( text ) &&
        RegExp( /[a-zA-Z0-9-_]/ ).test( text.charAt( text.length - 1 ) )
    ) {
        return true;
    } else {
        return errorMessge;
    }
};


const validateSchemaName = ( schemaName ) => {
    if( !schemaName ) return true;

    if( !RegExp( /[a-zA-Z0-9]/ ).test( schemaName.charAt( 0 ) ) ||
        !RegExp( /^[a-zA-Z0-9_]+$/ ).test( schemaName )
    ) {
        return'Invalid format for the "Schema Name" parameter value: the schema name must start with a letter or a' +
            ' digit and may contain letters, digits and underscores.';
    }
    return true;
};

const validateCfApiEndPoint = async( apiEndPoint, obj ) => {
    const errorMessage = 'Please choose a valid URL';
    try {
        const oUrl = new URL( apiEndPoint );
        obj.apiEndpoint = apiEndPoint;
        return oUrl.protocol === 'https:' ? true : errorMessage;
    } catch( e ) {
        return errorMessage;
    }
};

const isEmailAddressBlank = async( userId, obj ) => {
    if( !userId ) {
        return'Please enter e-mail address';
    }
    obj.userId = userId;
    return true;
};

const checkLogin = async( apiEndpoint, userId, password ) => {
    if( !password ) {
        return'Please enter password';
    } else {
        if( await Utils.initiateLogin( apiEndpoint, userId, password ) ){
            return true;
        } else {
            return'Login failed, please try again';
        }
    }
};

const validateServiceInstanceName = ( serviceInstanceName, existingServiceNames ) => {
    if( !existingServiceNames ){
        existingServiceNames = [];
    }
    if( !serviceInstanceName ){
        return'Please enter service instance name.';
    } else if( serviceInstanceName.length > 50 ){
        return'Service instance name can not exceed 50 characters in length.';
    } else if( !RegExp( /^[a-zA-Z0-9_-]+$/ ).test( serviceInstanceName ) ){
        return'Service instance name can include only alpha-numeric characters, hyphens, and underscores.';
    } else if( existingServiceNames.includes( serviceInstanceName ) ){
        return'A service instance with the given name already exists. Please enter a different name.';
    } else {
        return true;
    }
};

module.exports = { isValid,
                   validateSchemaName,
                   validateCfApiEndPoint,
                   isEmailAddressBlank,
                   checkLogin,
                   validateServiceInstanceName
};
